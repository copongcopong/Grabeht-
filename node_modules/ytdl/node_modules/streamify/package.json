{
  "name": "streamify",
  "description": "Streamify helps you easily provide a streaming interface for code.",
  "keywords": [
    "stream",
    "input",
    "output",
    "api"
  ],
  "version": "0.1.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/fent/node-streamify.git"
  },
  "author": {
    "name": "Roly Fentanes",
    "url": "https://github.com/fent"
  },
  "main": "./lib/index.js",
  "scripts": {
    "test": "mocha -R spec test/*-test.js"
  },
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "eventyoshi": "~0.1.4",
    "hashish": "~0.0.4"
  },
  "devDependencies": {
    "mocha": "*",
    "stream-equal": "~0.1.0",
    "through": "~1.1.2"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/fent/node-streamify/raw/master/LICENSE"
    }
  ],
  "readme": "# node-streamify [![Build Status](https://secure.travis-ci.org/fent/node-streamify.png)](http://travis-ci.org/fent/node-streamify)\n\nStreamify helps you easily provide a streaming interface for your code.\n\n\n# Usage\n\n```js\nvar streamify = require('streamify');\nvar request   = require('request');\n\nexports.doSomething = function doSomething() {\n  var stream = streamify();\n\n  request(url1, function(err, res, body) {\n    // do something with `body`\n\n    // once the actual stream you want to return is ready,\n    // call `stream.resolve()`\n    stream.resolve(request(url2));\n  });\n\n  // your function can return back a stream!!\n  return stream;\n}\n\n// because `doSomething()` returns a stream, it can be piped\nexports.doSomething().pipe(anotherStream);\n```\n\n\n# API\n### streamify([options])\n\nReturns an instance of a stream. `options` can be\n\n* `superCtor` - The object from which it inherits. Defaults to `require('stream').Stream`. Sometimes you may want to use this if your stream might be checked with the `instanceof` operator against objects such as `http.ServerResponse`.\n* `readable` - Defaults to `true`.\n* `writable` - Defaults to `true`.\n\n### Stream#resolve(stream)\n\nMust be called only once when the actual stream you are proxying to becomes available after an asynchronous operation.\n\n### Stream#unresolve()\n\nCan be used to unbind a a resolved stream to later call `resolve()` again.\n\n### Event: 'queueCall'\n* `string` - Method name.\n* `Object` - Arguments object.\n\nEmitted when a stream method that has been queued is called. Default queued methods are those in `superCtor.prototype` and `destroy`, `write`, `end`, `pause`, `resume`, and `setEncoding`.\n\n\n# Install\n\n    npm install streamify\n\n\n# Tests\nTests are written with [mocha](http://visionmedia.github.com/mocha/)\n\n```bash\nnpm test\n```\n\n# License\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "streamify@0.1.2",
  "_from": "streamify@~0.1.0"
}
